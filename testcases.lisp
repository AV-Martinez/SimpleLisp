; Each testcase consists of an expression and an expected value.
; Both are evaled and compared with equal
; Execute with (load 'testcases.lisp)

(defparameter *TESTS* 
	'(
	((append)												nil)
	((append nil nil)										nil)
	((append '(1) () '(2))									'(1 2))
	((atom 'abc)											t)
	((atom (cons 1 2))										nil)
	((atom nil)												t)
	((boundp 't)											t)
	((boundp 'nil)											t)
	((car nil)												nil)
	((cdr nil)												nil)
	((cond ((= 1 2) 'done) (t 1 2 3))						3)
	((cond ((= 1 1) 'done) (t 1 2 3))						'done)
	((do ((n 0 (+ 1 n))) 
		 ((= n 10) 'done) 
			1 2 3)											'done)
	((do ((n 0 (+ 1 n))) 
		 ((= n 10) 'done) 
			1 2 (return n))									0)
	((dolist (item '(1 2 3 4 5 6 7 8 9)) 
		(if (= item 9) (return 999))) 						999)
	((dolist (item '(1 2 3 4 5 6 7 8 9) 'done) 
		(if (= item 99) (return 999))) 						'done)
	((dolist (L '(1 2 3) L))								nil)
	((dotimes (n 10 n))										10)
	((eq (cons 1 2) (cons 1 2))								nil)
	((eql (cons 1 2) (cons 1 2))							nil)
	((equal (cons 1 2) (cons 1 2))							t)
	((equal (list 1 2) (list 1 2))							t)
	((let (form) (setq form '(* 2 3)) (eval form))			6)
	((funcall '+ 1 2 3)										6)
	((length
		(let (lista)
			(dotimes (n 100) 
				(setq lista (append lista (list n))))
			lista))											100)
	((let ((x 0))
		(loop 
			(setq x (+ 1 x))
			(if (= x 10) (return 'done))))					'done)
	((mapcar 'list '(a b) '(1 2))							'((a 1) (b 2)))
	((let ((x 1) y (z 2)) z) 								2)
	((let ((x 1) y (z 2)) y) 								nil)
	((let ()) 												nil)
	((apply '+ '(1 2))										3)
	((funcall '+ 1 2)										3)
	((type-of 1)											'integer)
	((type-of 'one)											'symbol)
	((type-of '(1 2))										'cons)
))

(defun run (times)
;	(do ((n 0 (+ 1 n))) ((= n times) '*all-tests-done*)
	(dotimes (n times '*all-tests-done*)
		(dolist (testcase *TESTS*)
			(let* ((test (nth 0 testcase)) (result (nth 1 testcase)) (evaledtest (eval test)) (evaledresult (eval result)))
				(cond ((not (equal evaledtest evaledresult)) 
							(print '**test-failed**) 
							(print 'expression------->)	(prin1 test) 
							(print 'expected-result-->)	(prin1 evaledresult)
							(print 'obtained-result-->)	(prin1 evaledtest) 
							(terpri) (return)))))))

; Running multiple times instead of just once allows checking 
; the garbage collection mechanism
(print (run 1))

